import telebot
from telebot.storage import StateMemoryStorage
from telebot import custom_filters
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import (BOT_TOKEN, LINK_TO_BOT, SHORT_RULES, FULL_RULES, COMMANDS, MIN_NUM_PLAYERS, ROLES, CONTENT_TYPES,
                    MyStates, START_GAME_DELAY, MAFIA_DELAY, COMMISSAR_DELAY, DOCTOR_DELAY, DISCUSSION_DELAY,
                    VOTING_DELAY, BOT_DESCRIPTION)

from database import (add_user, add_group, is_group_playing, add_user_to_games, is_user_playing,
                      change_group_state, check_user_exists, increase_session, get_players_list,
                      get_user_current_group_chat_id, update_user_data, get_user_data, get_alive_users,
                      get_users_with_role, insert_into_choices_history)

from process_votes import count_votes
import random
import threading

storage = StateMemoryStorage()

bot = telebot.TeleBot(token=BOT_TOKEN, state_storage=storage)
bot.add_custom_filter(custom_filters.StateFilter(bot))


@bot.message_handler(commands=["start"], chat_types=["supergroup"])
def handle_group_start(message):
    group_chat_id = message.chat.id

    add_group(group_chat_id)

    if is_group_playing(group_chat_id):
        bot.delete_message(group_chat_id, message.message_id)
        return

    bot_link_keyboard = get_bot_link_keyboard()

    text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–≥—Ä–∞—Ç—å –≤ –º–∞—Ñ–∏—é, –≥–¥–µ —è –±—É–¥—É –≤–µ–¥—É—â–∏–º. –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_game.\n\n"
            "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã –ø—Ä–æ—à—É –≤–∞—Å —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ –º–Ω–µ /start –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n")

    full_text = text + "<b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n" + SHORT_RULES  # –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é

    bot.send_message(group_chat_id, full_text, reply_markup=bot_link_keyboard, parse_mode="html")


@bot.message_handler(commands=["start"], chat_types=["private"])
def handle_private_start(message):
    user_id = message.from_user.id

    if not check_user_exists(user_id):
        add_user(user_id)

    text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∏–≥—Ä–∞—Ç—å –≤ –º–∞—Ñ–∏—é. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã "
            "–ø–æ –∫–æ–º–∞–Ω–¥–µ /rules, –∏–ª–∏ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É.")

    group_link_keyboard = get_group_link_keyboard(user_id)

    if group_link_keyboard:
        bot.send_message(message.chat.id, text, reply_markup=group_link_keyboard)

    else:
        bot.send_message(message.chat.id, text)


# —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É
def get_group_link_keyboard(user_id):
    group_chat_id = get_user_current_group_chat_id(user_id)

    if group_chat_id:
        group_link = bot.create_chat_invite_link(chat_id=group_chat_id).invite_link

        group_link_button = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É", url=group_link)
        group_link_keyboard = InlineKeyboardMarkup().add(group_link_button)

        return group_link_keyboard


# —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
def get_bot_link_keyboard():
    bot_link_button = InlineKeyboardButton(text="–ß–∞—Ç —Å –±–æ—Ç–æ–º", url=LINK_TO_BOT)
    bot_link_keyboard = InlineKeyboardMarkup().add(bot_link_button)

    return bot_link_keyboard


@bot.message_handler(commands=["rules"])
def send_rules(message):
    if message.chat.type == "private":  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        bot.send_message(message.chat.id, FULL_RULES, parse_mode="html")

    else:
        bot_link_keyboard = get_bot_link_keyboard()
        bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ "
                                          "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /rules –≤ —á–∞—Ç–µ —Å–æ –º–Ω–æ–π.", reply_markup=bot_link_keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
@bot.message_handler(commands=["start_game"], chat_types=["supergroup"])
def start_game_handler(message):
    group_chat_id = message.chat.id

    add_group(group_chat_id)

    if is_group_playing(group_chat_id):
        bot.send_message(group_chat_id, "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞!")

    else:
        change_group_state(group_chat_id, 1)

        increase_session(group_chat_id)

        bot.send_message(group_chat_id, "–ù–∞—á–∞–ª–∞—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–≥—Ä–µ!")

        ready_keyboard = InlineKeyboardMarkup()
        ready_button = InlineKeyboardButton("–ì–æ—Ç–æ–≤!", callback_data="ready")
        ready_keyboard.add(ready_button)

        msg_with_button = bot.send_message(group_chat_id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!",
                                           reply_markup=ready_keyboard)

        start_game_timer(message, msg_with_button)


# —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
def start_game_timer(message, msg_with_button):
    def start_the_game():
        group_chat_id = message.chat.id

        num_joined_players = len(get_players_list(group_chat_id))

        if num_joined_players < MIN_NUM_PLAYERS:
            bot.send_message(group_chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞–±–æ—Ä –∑–∞–Ω–æ–≤–æ")

            change_group_state(group_chat_id, 0)

        else:
            assign_roles(group_chat_id)
            make_mafia_stage(message)

        bot.delete_message(group_chat_id, msg_with_button.message_id)

    threading.Timer(START_GAME_DELAY, start_the_game).start()


# —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π –¥–ª—è –∏–≥—Ä—ã
def assign_roles(group_chat_id):
    player_chat_ids = get_players_list(group_chat_id)
    num_players = len(player_chat_ids)
    num_mafia = num_players // 3
    num_citizens = num_players - num_mafia - (len(ROLES) - 2)

    roles = []
    for role in ROLES:
        if role == "–ú–∞—Ñ–∏—è":
            for i in range(num_mafia):
                roles.append(role)

        elif role in ["–ö–æ–º–∏—Å—Å–∞—Ä", '–î–æ–∫—Ç–æ—Ä']:
            roles.append(role)

        else:
            for i in range(num_citizens):
                roles.append(role)

    random.shuffle(roles)

    for user_id, role in zip(player_chat_ids, roles):
        update_user_data(user_id, group_chat_id, "role", role)

        bot.send_message(user_id, f"–í–∞—à–∞ —Ä–æ–ª—å - {role}")


# —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—á–Ω–æ–π —Ñ–∞–∑—ã
def make_mafia_stage(message):
    group_chat_id = message.chat.id

    alive_players = get_alive_users(group_chat_id)
    mafia_chat_ids = get_users_with_role(group_chat_id, "–ú–∞—Ñ–∏—è")

    for user_id in alive_players:  # —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ—á–∏
        update_user_data(user_id, group_chat_id, param="choice", data=None)

    bot_link_keyboard = get_bot_link_keyboard()

    bot.send_message(group_chat_id, "–ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å üåô/nüòé –ú–∞—Ñ–∏—è, –ø—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É!",
                     reply_markup=bot_link_keyboard)

    player_number = 1

    for mafia_chat_id in mafia_chat_ids:
        players_to_kill_keyboard = InlineKeyboardMarkup()

        for alive_player_id in alive_players:  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–∞—Ñ–∏–∏
            if alive_player_id not in mafia_chat_ids:  # –º–∞—Ñ–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ
                player_to_kill_name = str(bot.get_chat_member(group_chat_id, alive_player_id).user.username)

                player_to_kill_btn = InlineKeyboardButton(text=f"{player_number}. {player_to_kill_name}",
                                                          callback_data=f"mafia {alive_player_id}")

                players_to_kill_keyboard.add(player_to_kill_btn)
                player_number += 1

        if len(mafia_chat_ids) > 1:  # –µ—Å–ª–∏ –≤ –∏–≥—Ä–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –º–∞—Ñ–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –Ω–∏—Ö —á–∞—Ç
            bot.send_message(mafia_chat_id, "–î–∞—é –≤–∞–º –º–∏–Ω—É—Ç—É –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä!\n\n"
                                            "P.S. –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º–∞—Ñ–∏–∏.")

        msg_with_button = bot.send_message(mafia_chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É!", reply_markup=players_to_kill_keyboard)

        save_message_id(mafia_chat_id, msg_with_button)

    start_mafia_timer(message)


# —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
def start_mafia_timer(message):
    def end_mafia_stage():
        for mafia_chat_id in mafia_chat_ids:
            choice = get_user_data(mafia_chat_id, group_chat_id, "choice")

            if choice is None:  # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–∞—Ñ–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
                group_link_keyboard = get_group_link_keyboard(mafia_chat_id)

                with bot.retrieve_data(mafia_chat_id, mafia_chat_id) as data:  # –¥–æ—Å—Ç–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    msg_with_button_id = data["msg_with_button_id"]

                    bot.edit_message_text(chat_id=mafia_chat_id, message_id=msg_with_button_id,
                                          text="–≠—Ç–æ–π –Ω–æ—á—å—é –≤—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏",
                                          reply_markup=group_link_keyboard)

        for alive_chat_id in alive_players:
            bot.delete_state(alive_chat_id, alive_chat_id)

        bot.send_message(group_chat_id, "–ú–∞—Ñ–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ")

        start_commissar_timer(message)

    group_chat_id = message.chat.id

    alive_players = get_alive_users(group_chat_id)

    for alive_player_id in alive_players:  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –º–æ–≥–ª–∏ –ø–∏—Å–∞—Ç—å –Ω–æ—á—å—é
        bot.set_state(alive_player_id, MyStates.message_to_delete, group_chat_id)

    mafia_chat_ids = get_users_with_role(group_chat_id, "–ú–∞—Ñ–∏—è")

    for mafia_chat_id in mafia_chat_ids:
        bot.set_state(mafia_chat_id, MyStates.mafia_chat, mafia_chat_id)  # —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–∞—Ñ–∏–∏

    threading.Timer(MAFIA_DELAY, end_mafia_stage).start()


# —Ç–∞–π–º–µ—Ä –¥–ª—è –∫–æ–º–∏—Å—Å–∞—Ä–∞
def start_commissar_timer(message):
    def end_commissar_stage():

        if commissar_chat_id in alive_players:
            choice = get_user_data(commissar_chat_id, group_chat_id, "choice")

            if choice is None and len(all_players) - 1 != len(checked_player_ids):  # –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∞—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
                group_link_keyboard = get_group_link_keyboard(commissar_chat_id)

                with bot.retrieve_data(commissar_chat_id, commissar_chat_id) as data:
                    msg_with_button_id = data["msg_with_button_id"]

                    bot.edit_message_text(chat_id=commissar_chat_id, message_id=msg_with_button_id,
                                          text="–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É",
                                          reply_markup=group_link_keyboard)

            bot.delete_state(commissar_chat_id, commissar_chat_id)

        bot.send_message(group_chat_id, "–ö–æ–º–∏—Å—Å–∞—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –∏–≥—Ä–æ–∫–∞")

        start_doctor_timer(message)

    group_chat_id = message.chat.id
    alive_players = get_alive_users(group_chat_id)

    bot_link_keyboard = get_bot_link_keyboard()

    bot.send_message(group_chat_id, "ü§† –ö–æ–º–∏—Å—Å–∞—Ä, –ø—Ä–æ—Å—ã–ø–∞–π—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä—å –∏–≥—Ä–æ–∫–∞!",
                     reply_markup=bot_link_keyboard)

    commissar_chat_id = get_users_with_role(group_chat_id, "–ö–æ–º–∏—Å—Å–∞—Ä")

    if commissar_chat_id:
        commissar_chat_id = commissar_chat_id[0]

        players_to_check_keyboard = InlineKeyboardMarkup()

        checked_player_ids = get_user_data(commissar_chat_id, group_chat_id, "choices_history")

        all_players = get_players_list(group_chat_id)

        if checked_player_ids:
            text = "–í—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏:"

            for checked_player_id in checked_player_ids:
                checked_player_name = str(bot.get_chat_member(group_chat_id, checked_player_id).user.username)
                checked_player_role = get_user_data(checked_player_id, group_chat_id, "role")

                if checked_player_role == "–ú–∞—Ñ–∏—è":
                    text += f"\n{checked_player_name} - –º–∞—Ñ–∏—è"

                else:
                    text += f"\n{checked_player_name} - –Ω–µ –º–∞—Ñ–∏—è"

        else:
            text = "–í—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏"

        bot.send_message(commissar_chat_id, text)

        if len(all_players) - 1 != len(checked_player_ids):
            for alive_player_id in alive_players:  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–∏—Å—Å–∞—Ä–∞
                if alive_player_id != commissar_chat_id and alive_player_id not in checked_player_ids:
                    player_to_check_name = str(bot.get_chat_member(group_chat_id, alive_player_id).user.username)

                    player_to_check_btn = InlineKeyboardButton(text=player_to_check_name,
                                                               callback_data=f"commissar {alive_player_id}")

                    players_to_check_keyboard.add(player_to_check_btn)

            msg_with_button = bot.send_message(commissar_chat_id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞!",
                                               reply_markup=players_to_check_keyboard)

            save_message_id(commissar_chat_id, msg_with_button)

        else:
            group_link_keyboard = get_group_link_keyboard(commissar_chat_id)

            bot.send_message(commissar_chat_id, "–í—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤", reply_markup=group_link_keyboard)

    threading.Timer(COMMISSAR_DELAY, end_commissar_stage).start()


def start_doctor_timer(message):
    def end_doctor_stage():
        if doctor_chat_id:
            choice = get_user_data(doctor_chat_id, group_chat_id, "choice")

            if choice is None:  # –µ—Å–ª–∏ –¥–æ–∫—Ç–æ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª

                group_link_keyboard = get_group_link_keyboard(doctor_chat_id)

                with bot.retrieve_data(doctor_chat_id, doctor_chat_id) as data:
                    msg_with_button_id = data["msg_with_button_id"]

                    bot.edit_message_text(chat_id=doctor_chat_id, message_id=msg_with_button_id,
                                          text="–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É",
                                          reply_markup=group_link_keyboard)

            bot.delete_state(doctor_chat_id, doctor_chat_id)

        bot.send_message(group_chat_id, "–î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª –∏–≥—Ä–æ–∫–∞")

        for alive_chat_id in alive_players:
            bot.delete_state(alive_chat_id, group_chat_id)

        doctor_choice = get_user_data(doctor_chat_id, group_chat_id, 'choice')

        if not doctor_choice:
            insert_into_choices_history(doctor_chat_id, group_chat_id, 0)

        mafia_chat_ids = get_users_with_role(group_chat_id, "–ú–∞—Ñ–∏—è")
        killed_player = count_votes(group_chat_id, mafia_chat_ids)

        healed_users = get_user_data(doctor_chat_id, group_chat_id, 'choices_history')

        last_healed_user = None

        if healed_users:
            last_healed_user = healed_users[-1]

        if not killed_player:
            bot.send_message(group_chat_id, "–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å ‚òÄ –ù–æ—á—å—é –º–∞—Ñ–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –∏ –Ω–∏–∫–æ–≥–æ –Ω–µ —É–±–∏–ª–∞")

        else:
            killed_player_name = str(bot.get_chat_member(group_chat_id, killed_player).user.username)

            if killed_player == last_healed_user:
                bot.send_message(group_chat_id, "–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å ‚òÄ –ù–æ—á—å—é –º–∞—Ñ–∏—è –ø–æ–ø—ã—Ç–∞–ª–∞—Å—å —É–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞, –Ω–æ –µ–≥–æ —Å–ø–∞—Å –¥–æ–∫—Ç–æ—Ä!")

            else:
                update_user_data(killed_player, group_chat_id, "killed", 1)
                bot.send_message(group_chat_id, f"–ù–∞—Å—Ç—É–ø–∏–ª –¥–µ–Ω—å ‚òÄ –ù–æ—á—å—é –º–∞—Ñ–∏—è —É–±–∏–ª–∞ –∏–≥—Ä–æ–∫–∞ {killed_player_name}")

        make_day_stage(message)

    group_chat_id = message.chat.id
    alive_players = get_alive_users(group_chat_id)

    bot_link_keyboard = get_bot_link_keyboard()

    bot.send_message(group_chat_id, "üë®‚Äç‚öï –î–æ–∫—Ç–æ—Ä, –ø—Ä–æ—Å—ã–ø–∞–π—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –∏ –≤—ã–ª–µ—á–∏ –∏–≥—Ä–æ–∫–∞!",
                     reply_markup=bot_link_keyboard)

    doctor_chat_id = get_users_with_role(group_chat_id, "–î–æ–∫—Ç–æ—Ä")

    if doctor_chat_id:
        doctor_chat_id = doctor_chat_id[0]

        healed_users = get_user_data(doctor_chat_id, group_chat_id, 'choices_history')

        last_healed_user = None

        if healed_users:
            last_healed_user = healed_users[-1]

        is_doctor_heal_himself = doctor_chat_id in healed_users

        players_to_heal_keyboard = InlineKeyboardMarkup()

        for alive_player_id in alive_players:  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞
            if (last_healed_user != alive_player_id and
                    not (is_doctor_heal_himself and alive_player_id == doctor_chat_id)):

                player_to_heal_name = str(bot.get_chat_member(group_chat_id, alive_player_id).user.username)

                player_to_heal_btn = InlineKeyboardButton(text=player_to_heal_name,
                                                          callback_data=f'doctor {alive_player_id}')

                players_to_heal_keyboard.add(player_to_heal_btn)

        msg_with_button = bot.send_message(doctor_chat_id, "–í—ã–ª–µ—á–∏—Ç–µ –∏–≥—Ä–æ–∫–∞!",
                                           reply_markup=players_to_heal_keyboard)

        save_message_id(doctor_chat_id, msg_with_button)

    threading.Timer(DOCTOR_DELAY, end_doctor_stage).start()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–∏
@bot.message_handler(state=MyStates.message_to_delete)
def delete_forbidden_messages(message):
    user_id = message.from_user.id
    group_chat_id = get_user_current_group_chat_id(user_id)

    if message.chat.type == "supergroup":
        bot.delete_message(group_chat_id, message.message_id)


def save_message_id(user_id, msg_with_buttons):  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –±—É–¥—É—â–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º
    bot.set_state(user_id, MyStates.msg_with_buttons, user_id)

    with bot.retrieve_data(user_id, user_id) as data:
        data["msg_with_button_id"] = msg_with_buttons.message_id


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á–∞—Ç–∞ –º–∞—Ñ–∏–∏
@bot.message_handler(state=MyStates.mafia_chat)
def mafia_chat(message):
    user_id = message.from_user.id
    group_chat_id = get_user_current_group_chat_id(user_id)

    mafia_chat_ids = get_users_with_role(group_chat_id, "–ú–∞—Ñ–∏—è")

    for mafia_chat_id in mafia_chat_ids:
        if mafia_chat_id != user_id:
            bot.send_message(mafia_chat_id, f"{message.from_user.username}: {message.text}")


def make_day_stage(message):
    group_chat_id = message.chat.id

    alive_players = get_alive_users(group_chat_id)

    for alive_player_id in alive_players:  # —É–¥–∞–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –¥–Ω—è
        update_user_data(alive_player_id, group_chat_id, "choice", None)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    is_game_end = check_game_end(group_chat_id)

    if is_game_end:
        return

    text = "–≠—Ç–æ–π –Ω–æ—á—å—é –æ—Å—Ç–∞–ª–∏—Å—å –≤ –∂–∏–≤—ã—Ö:\n\n"

    for i, alive_player_id in enumerate(alive_players):  # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        alive_player_name = str(bot.get_chat_member(group_chat_id, alive_player_id).user.username)

        text += f"{i + 1}. {alive_player_name}\n"

    bot.send_message(group_chat_id, text)

    bot.send_message(group_chat_id, "–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è, —É –≤–∞—Å –µ—Å—Ç—å 3 –º–∏–Ω—É—Ç—ã")

    start_discussion_timer(message)


def start_discussion_timer(message):
    def timer_func():  # –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        make_voting(message)

    threading.Timer(DISCUSSION_DELAY, timer_func).start()


def make_voting(message):
    group_chat_id = message.chat.id

    alive_players = get_alive_users(group_chat_id)

    alive_players_keyboard = InlineKeyboardMarkup()

    for alive_player_id in alive_players:  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        alive_player_name = str(bot.get_chat_member(group_chat_id, alive_player_id).user.username)

        alive_players_btn = InlineKeyboardButton(text=alive_player_name, callback_data=f"all {alive_player_id}")

        alive_players_keyboard.add(alive_players_btn)

    bot_link_keyboard = get_bot_link_keyboard()

    bot.send_message(message.chat.id, "–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è! –í—Å–µ—Ö –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ—à—É –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å–æ –º–Ω–æ–π",
                     reply_markup=bot_link_keyboard)

    for alive_player_id in alive_players:
        msg_with_button = bot.send_message(alive_player_id, "–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑–≥–Ω–∞—Ç—å! "
                                                            "–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä",
                                           reply_markup=alive_players_keyboard)

        save_message_id(alive_player_id, msg_with_button)

    start_voting_timer(message)


def start_voting_timer(message):
    def end_voting():
        group_chat_id = message.chat.id

        bot.send_message(group_chat_id, "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        alive_players = get_alive_users(group_chat_id)

        exiled_player = count_votes(group_chat_id, alive_players)

        for alive_user_chat_id in alive_players:  # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
            choice = get_user_data(alive_user_chat_id, group_chat_id, "choice")

            if choice is None:  # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
                group_link_keyboard = get_group_link_keyboard(alive_user_chat_id)

                with bot.retrieve_data(alive_user_chat_id, alive_user_chat_id) as data:
                    msg_with_button_id = data["msg_with_button_id"]

                    bot.edit_message_text(chat_id=alive_user_chat_id, message_id=msg_with_button_id,
                                          text="–°–µ–≥–æ–¥–Ω—è –≤—ã —Ä–µ—à–∏–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã–≥–æ–Ω—è—Ç—å",
                                          reply_markup=group_link_keyboard)

        if not exiled_player:
            bot.send_message(group_chat_id, "–ì–æ–ª–æ—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –∏–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–ª –≤—ã–≥–æ–Ω—è—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ –æ—Å—Ç–∞–ª–∏—Å—å")

        else:
            exiled_player_name = str(bot.get_chat_member(group_chat_id, exiled_player).user.username)

            text = f"–°–µ–≥–æ–¥–Ω—è –±—ã–ª –∏–∑–≥–Ω–∞–Ω –∏–≥—Ä–æ–∫ {exiled_player_name}.\n\n"

            exiled_player_role = get_user_data(exiled_player, group_chat_id, "role")

            if exiled_player_role.lower() == "–º–∞—Ñ–∏—è":
                text += "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –º–∏—Ä–Ω—ã–µ! üéâ –û–Ω –±—ã–ª –º–∞—Ñ–∏–µ–π!"  # –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é

            else:
                text += "–û–Ω –Ω–µ –±—ã–ª –º–∞—Ñ–∏–µ–π, –∏ —Ç–µ–ø–µ—Ä—å —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –µ—â—ë —É–º–µ–Ω—å—à–∏–ª–∏—Å—å..."

            bot.send_message(group_chat_id, text)

            update_user_data(exiled_player, message.chat.id, "killed", 1)

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
            is_game_end = check_game_end(group_chat_id)

            if is_game_end:
                return

        make_mafia_stage(message)

    threading.Timer(VOTING_DELAY, end_voting).start()


def check_game_end(group_chat_id):
    winners_list = []
    text = ""

    alive_players = get_alive_users(group_chat_id)

    mafia_chat_ids = get_users_with_role(group_chat_id, "–ú–∞—Ñ–∏—è")

    pieceful_player_ids = sorted(list(set(alive_players) - set(mafia_chat_ids)))

    if len(pieceful_player_ids) <= len(mafia_chat_ids):
        text = "–ú–∞—Ñ–∏—è –≤—ã–∏–≥—Ä–∞–ª–∞!\n\n"
        winners_list = mafia_chat_ids

    elif len(mafia_chat_ids) == 0:
        text = "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ —Å–º–æ–≥–ª–∏ –ø–æ–±–æ—Ä–æ—Ç—å –º–∞—Ñ–∏—é!\n\n"
        winners_list = pieceful_player_ids

    if winners_list:  # –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        text += "–ü–æ–±–µ–¥–∏–≤—à–∏–µ –∏–≥—Ä–æ–∫–∏:\n"

        for i, user_id in enumerate(winners_list):
            winner_name = str(bot.get_chat_member(group_chat_id, user_id).user.username)

            text += f"{i + 1}. {winner_name}\n"

        bot.send_message(group_chat_id, text)

        change_group_state(group_chat_id, 0)

        return True

    return False


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤!"
@bot.callback_query_handler(func=lambda call: call.data == "ready")
def ready_handler(call):
    user_id = call.from_user.id
    c_id = call.message.chat.id
    m_id = call.message.message_id

    if not check_user_exists(user_id):
        bot_link_keyboard = get_bot_link_keyboard()

        bot.send_message(c_id, f"{call.from_user.username}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å–æ –º–Ω–æ–π",
                         reply_markup=bot_link_keyboard)

    elif is_user_playing(user_id):
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ")

    else:
        add_user_to_games(c_id, user_id)

        ready_user_ids = get_players_list(c_id)

        text = ("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!\n\n"
                "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏–µ—Å—è –∏–≥—Ä–æ–∫–∏:\n")

        for i, ready_user_id in enumerate(ready_user_ids):
            ready_user_name = str(bot.get_chat_member(c_id, ready_user_id).user.username)

            text += f"{i + 1}. {ready_user_name}\n"

        ready_keyboard = InlineKeyboardMarkup()
        ready_button = InlineKeyboardButton("–ì–æ—Ç–æ–≤!", callback_data="ready")
        ready_keyboard.add(ready_button)

        bot.edit_message_text(text=text, chat_id=c_id, message_id=m_id, reply_markup=ready_keyboard)


@bot.callback_query_handler(func=lambda call: call.data.split()[1].isdigit())
def process_user_votes(call):
    c_id = call.message.chat.id
    m_id = call.message.message_id
    data = call.data.split()

    try:

        voted_user_id = call.from_user.id
        chosen_user_id = int(data[1])

        group_chat_id = get_user_current_group_chat_id(voted_user_id)

        update_user_data(voted_user_id, group_chat_id, "choice", chosen_user_id)

        group_link_keyboard = get_group_link_keyboard(voted_user_id)

        chosen_user_name = str(bot.get_chat_member(group_chat_id, chosen_user_id).user.username)

        bot.edit_message_text(chat_id=c_id, message_id=m_id, text=f"–í–∞—à –≤—ã–±–æ—Ä: {chosen_user_name}",
                              reply_markup=group_link_keyboard)

        voted_user_role = data[0]

        if voted_user_role == "commissar":
            checked_user_role = get_user_data(chosen_user_id, group_chat_id, "role")

            if checked_user_role == "–ú–∞—Ñ–∏—è":
                bot.send_message(c_id, f"–ò–≥—Ä–æ–∫ {chosen_user_name} - –º–∞—Ñ–∏—è!")

            else:
                bot.send_message(c_id, f"–ò–≥—Ä–æ–∫ {chosen_user_name} - –Ω–µ –º–∞—Ñ–∏—è!")

            insert_into_choices_history(c_id, group_chat_id, chosen_user_id)

        elif voted_user_role == "doctor":
            bot.send_message(c_id, f"–ò–≥—Ä–æ–∫ {chosen_user_name} –≤—ã–ª–µ—á–µ–Ω!")

            insert_into_choices_history(c_id, group_chat_id, chosen_user_id)

    except IndexError:
        bot.edit_message_text(chat_id=c_id, message_id=m_id, text=f"–ö–∞–∂–µ—Ç—Å—è, –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")


@bot.message_handler(content_types=CONTENT_TYPES, chat_types=["supergroup"])
def deleting_messages(message):
    user_id = message.from_user.id
    group_chat_id = message.chat.id

    is_group_in_game = is_group_playing(group_chat_id)

    if is_group_in_game:
        alive_players = get_alive_users(group_chat_id)

        if user_id not in alive_players:
            bot.delete_message(group_chat_id, message.message_id)


if __name__ == "__main__":
    try:
        bot.set_my_commands(COMMANDS)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
        bot.set_my_description(BOT_DESCRIPTION)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
        bot.set_my_short_description(BOT_DESCRIPTION)  # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞

    except telebot.apihelper.ApiTelegramException:
        pass

    bot.infinity_polling()
